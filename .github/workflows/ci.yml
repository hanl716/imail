name: Email Management CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    services: # Add PostgreSQL service for integration tests
      postgres_test_db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: email_manager_test_db
        ports:
          - 5434:5432 # Map service port 5432 to host port 5434
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        python-version: ['3.10']
        node-version: ['18.x']   # Consistent with Dockerfile

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # Cache pip dependencies
        cache-dependency-path: ./email_management_backend/requirements.txt

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./email_management_frontend/package-lock.json # Assumes package-lock.json is used and committed

    - name: Install Python Backend Dependencies
      working-directory: ./email_management_backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # For CI, good to install test/lint tools explicitly if not in main requirements.txt
        # pip install pytest pytest-asyncio flake8 black

    - name: Lint Backend
      working-directory: ./email_management_backend
      run: |
        # flake8 and black are now in requirements.txt
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .

    - name: Test Backend
      working-directory: ./email_management_backend
      env: # Set environment variables for the test step
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5434/email_manager_test_db
      run: |
        pytest tests/

    - name: Install Frontend Dependencies
      working-directory: ./email_management_frontend
      # Using npm ci for cleaner installs based on package-lock.json
      run: npm ci

    - name: Lint Frontend
      working-directory: ./email_management_frontend
      run: |
        # Assuming 'npm run lint' is configured in package.json (e.g., "lint": "eslint . --ext .js,.vue src")
        npm run lint

    - name: Test Frontend
      working-directory: ./email_management_frontend
      run: |
        # Assuming 'npm run test:unit' is configured for non-interactive CI
        # e.g., "test:unit": "vue-cli-service test:unit --watchAll=false --ci"
        npm run test:unit -- --ci --watchAll=false --coverage

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: lint-and-test # Run only if linting and testing pass
    # Only build and push on pushes to main, not on PRs to main for this example
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub (Example)
      # This step should only run if you intend to push.
      # For PRs or local testing of build, login might be skipped.
      # Ensure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN are set in GitHub secrets for the repo.
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Backend Image (Example)
      uses: docker/build-push-action@v5
      with:
        context: ./email_management_backend
        file: ./email_management_backend/Dockerfile
        push: true # Set to true to push to registry; false for just build
        tags: |
          yourdockerhubusername/email-backend:${{ github.sha }}
          yourdockerhubusername/email-backend:latest
        # Ensure 'yourdockerhubusername' is replaced

    - name: Build and Push Frontend Image (Example)
      uses: docker/build-push-action@v5
      with:
        context: ./email_management_frontend
        file: ./email_management_frontend/Dockerfile
        push: true
        tags: |
          yourdockerhubusername/email-frontend:${{ github.sha }}
          yourdockerhubusername/email-frontend:latest
        # Ensure 'yourdockerhubusername' is replaced

    # Note: Celery worker and beat use the same backend Docker image, so no separate build needed for them.

  # Placeholder for Deployment Job (Future - highly environment specific)
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: build-docker-images # Depends on successful image build & push
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Trigger condition
  #   environment:
  #     name: staging
  #     url: https://staging.your-app-url.com # Optional: Link to environment
  #   steps:
  #   - name: Deploy to Staging Environment (Placeholder)
  #     # Add your deployment script/commands here
  #     # e.g., ssh to server and docker-compose pull && docker-compose up -d
  #     # or, helm upgrade for Kubernetes, etc.
  #     run: echo "Deploying to Staging..."
  #     # Example:
  #     # - name: SSH and Deploy
  #     #   uses: appleboy/ssh-action@master
  #     #   with:
  #     #     host: ${{ secrets.STAGING_HOST }}
  #     #     username: ${{ secrets.STAGING_USERNAME }}
  #     #     key: ${{ secrets.STAGING_SSH_KEY }}
  #     #     script: |
  #     #       cd /path/to/your/app
  #     #       docker-compose pull
  #     #       docker-compose up -d
  #     #       echo "Deployment to Staging complete."
